openapi: 3.0.1
info:
  title: "Urban Incidents API"
  description: |
    This API is designed to manage users and urban incidents reported in the city.  
    It allows the creation of users, registration of urban incidents, and querying the status of these incidents.  
    With this API, users can interact with the system, report incidents, and receive updates on the status of reported incidents.
  version: "1.0.0"
paths:
  /v1/users:
    post:
      tags:
        - User
      summary: "Create a new user"
      description: "Registers a user in the application with an email and a password."
      requestBody:
        description: "User data to register"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
            examples:
              Request Example:
                value:
                  { "email": "user@example.com", "password": "securePass123" }
      responses:
        "201":
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                New User:
                  value: { "id": "12345", "email": "user@example.com" }
                User with name:
                  value:
                    {
                      "id": "67890",
                      "email": "another@example.com",
                      "password": "password123",
                      "name": "John Doe",
                    }
  /v1/users/login:
    post:
      tags:
        - User
      summary: "Endpoint for user login"
      description: |
        This method handles HTTP POST requests to give a user access to their account.
        It accepts a JSON object with the user's email and password and returns the user with an updated token if valid, or a 404 if not found.
      requestBody:
        description: "A JSON object containing the user's email and password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              Request Example:
                value:
                  email: "user@example.com"
                  password: "securePassword123"
      responses:
        "200":
          description: "User found and successfully logged in with token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Response Example:
                  value:
                    id: "12345"
                    email: "user@example.com"
                    token: "jwt-token-here"
        "404":
          description: "User not found or invalid credentials"

components:
  schemas:
    CreateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        token:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
