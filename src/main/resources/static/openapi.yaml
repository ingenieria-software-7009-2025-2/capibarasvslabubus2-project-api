openapi: 3.0.1
info:
  title: "Urban Incidents API"
  description: |
    This API is designed to manage users and urban incidents reported in the city.  
    It allows the creation of users, registration of urban incidents, and querying the status of these incidents.  
    With this API, users can interact with the system, report incidents, and receive updates on the status of reported incidents.
  version: "1.0.0"
paths:
  /v1/users:
    post:
      tags:
        - User
      summary: "Create a new user"
      description: "Registers a user in the application with an email and a password."
      requestBody:
        description: "User data to register"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
            examples:
              Request Example:
                value:
                  { "email": "user@example.com", "password": "securePass123" }
      responses:
        "201":
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                New User:
                  value: { "id": "12345", "email": "user@example.com" }
                User with name:
                  value:
                    {
                      "id": "67890",
                      "email": "another@example.com",
                      "password": "password123",
                      "name": "John Doe",
                    }
  /v1/users/login:
    post:
      tags:
        - User
      summary: "Endpoint for user login"
      description: |
        This method handles HTTP POST requests to give a user access to their account.
        It accepts a JSON object with the user's email and password and returns the user with an updated token if valid, or a 404 if not found.
      requestBody:
        description: "A JSON object containing the user's email and password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              Request Example:
                value:
                  email: "user@example.com"
                  password: "securePassword123"
      responses:
        "200":
          description: "User found and successfully logged in with token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Response Example:
                  value:
                    id: "12345"
                    email: "user@example.com"
                    token: "jwt-token-here"
        "404":
          description: "User not found or invalid credentials"
  /v1/users/logout:
    post:
      tags:
        - User
      summary: User logout
      description: Handles HTTP POST requests to log out a user session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequest"
      responses:
        "200":
          description: Session successfully closed.
          content:
            text/plain:
              schema:
                type: string
                example: "Session cerrada"
        "400":
          description: Bad request, possibly invalid token.
        "401":
          description: Token not provided or unauthorized.
  /v1/users/me:
    get:
      tags:
        - User
      summary: Retrieve user information
      description: Handles HTTP GET requests to fetch user details.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        "200":
          description: Successfully retrieved user information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Response Example:
                  value:
                    id: "67c50cec7c437410620df6e3"
                    email: "pedro.sanchez@example.com"
                    password: "pedropassword2025"
                    token: "d30e4e45-6a82-4493-94ad-dd011f0f7d8a"
        "401":
          description: Unauthorized, missing or invalid token.
    put:
      tags:
        - User
      summary: Update current user information
      description: Handles HTTP PUT requests to update user details.
      security:
        - basicAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Successfully updated user information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              examples:
                Response Example:
                  value:
                    id: "67c50cec7c437410620df6e3"
                    email: "pedro.sanchez@example.com"
                    password: "pedropassword2025"
                    token: "d30e4e45-6a82-4493-94ad-dd011f0f7d8a"
        "401":
          description: Unauthorized, missing or invalid token.
        "404":
          description: User not found.
components:
  schemas:
    CreateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        token:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LogoutRequest:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
